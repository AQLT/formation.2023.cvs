{
  "hash": "055daf4797c035c6b8f052c42f8d183c",
  "result": {
    "markdown": "---\ntitle: \"2 - R et JDemetra+\"\n---\n\n\n\n\n\n\n\n# Lancer JDemetra+ depuis R\n### RJDemetra ![](img/rjdemetra_logo.png){height=1.5cm}\n\nRJDemetra est un package qui permet de lancer les routines de JDemetra depuis R\n\n{{< fa brands github >}} : https://github.com/jdemetra/rjdemetra\n\nPage web : https://jdemetra.github.io/rjdemetra/\n\nPour l'installer :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"RJDemetra\")\n```\n:::\n\n\n\n{{< fa arrow-circle-right >}} Peut être utilisé pour développer de nouveaux outils pour aider la production\n\n{{< fa arrow-circle-right >}} Il faut Java 8 -> voir [manuel d'installation](https://AQLT.github.io/{{< var repo-github >}}/manuel_installation.html)\n\n## Current status\n\n### Current status\n\n- RegARIMA, TRAMO-SEATS et X-13-ARIMA :  \n+ spécifications prédéfinies et personnalisées \n+ classes S3 avec des méthodes plot, summary, print\n\n\\medskip\n\n- Manipulation de workspaces JD+ :  \n+ Import de workspaces to avec le modèle CVS\n+ Export des modèles R créé par RJDemetra\n\n\\medskip\n\n- Contient une base de données : les IPI dans l'industrie manufacturière dans l'UE\n\n\n## RegARIMA : exemples\n\n### RegARIMA : exemples (1/4)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\nipi_fr <- ipi_c_eu[,\"FR\"]\nregarima_model <- regarima_x13(ipi_fr, spec = \"RG4c\")\nregarima_model\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (2, 1, 1, 0, 1, 1)\nLog-transformation: no\nCoefficients:\n          Estimate Std. Error\nPhi(1)     0.05291      0.108\nPhi(2)     0.18672      0.074\nTheta(1)  -0.52137      0.103\nBTheta(1) -0.66132      0.042\n\n             Estimate Std. Error\nWeek days      0.6927      0.031\nLeap year      2.0903      0.694\nEaster [1]    -2.5476      0.442\nTC (4-2020)  -35.6481      2.092\nAO (3-2020)  -21.1492      2.122\nAO (5-2011)   13.1869      1.810\nLS (11-2008)  -9.2744      1.758\nLS (1-2009)   -7.2838      1.756\n\n\nResidual standard error: 2.193 on 346 degrees of freedom\nLog likelihood = -795.1, aic =  1616 aicc =  1617, bic(corrected for length) = 1.767\n```\n:::\n:::\n\n\n### RegARIMA : exemples (2/4)\n\\footnotesize\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(regarima_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (2, 1, 1, 0, 1, 1)\n\nModel: RegARIMA - X13\nEstimation span: from 1-1990 to 12-2020\nLog-transformation: no\nRegression model: no mean, trading days effect(2), leap year effect, Easter effect, outliers(5)\n\nCoefficients:\nARIMA: \n          Estimate Std. Error  T-stat Pr(>|t|)    \nPhi(1)     0.05291    0.10751   0.492    0.623    \nPhi(2)     0.18672    0.07397   2.524    0.012 *  \nTheta(1)  -0.52137    0.10270  -5.076 6.19e-07 ***\nBTheta(1) -0.66132    0.04222 -15.665  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model: \n              Estimate Std. Error  T-stat Pr(>|t|)    \nWeek days      0.69265    0.03143  22.039  < 2e-16 ***\nLeap year      2.09030    0.69411   3.011  0.00278 ** \nEaster [1]    -2.54756    0.44179  -5.766 1.75e-08 ***\nTC (4-2020)  -35.64811    2.09186 -17.041  < 2e-16 ***\nAO (3-2020)  -21.14919    2.12203  -9.966  < 2e-16 ***\nAO (5-2011)   13.18692    1.80958   7.287 2.03e-12 ***\nLS (11-2008)  -9.27443    1.75768  -5.277 2.28e-07 ***\nLS (1-2009)   -7.28377    1.75606  -4.148 4.19e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 2.193 on 346 degrees of freedom\nLog likelihood = -795.1, aic =  1616, aicc =  1617, bic(corrected for length) = 1.767\n```\n:::\n:::\n\n\n### RegARIMA : exemples (3/4)\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlayout(matrix(1:6, 3, 2));plot(regarima_model, ask = FALSE)\n```\n\n::: {.cell-output-display}\n![](02_R_et_JD_files/figure-beamer/unnamed-chunk-4-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### RegARIMA : exemples (4/4)\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(regarima_model, which = 7)\n```\n\n::: {.cell-output-display}\n![](02_R_et_JD_files/figure-beamer/unnamed-chunk-6-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n## CVS-CJO : exemples\n### CVS-CJO : exemples (1/8)\n\nUn object `SA` est une `list()` de 5 éléments:\n\n![](img/sa_obj_struct.png)\n\n### CVS-CJO : exemples (2/8)\n\nPossibilité de définir ses propres spécifications comme sous JD+ ou d'utiliser les spécifications prédéfinies:\n\n\\footnotesize\n\n::: {.cell}\n\n```{.r .cell-code}\nx13_usr_spec <- x13_spec(spec = c(\"RSA5c\"),\n                         usrdef.outliersEnabled = TRUE,\n                         usrdef.outliersType = c(\"LS\", \"AO\"),\n                         usrdef.outliersDate = c(\"2008-10-01\",\n                                                 \"2002-01-01\"),\n                         usrdef.outliersCoef = c(36, 14),\n                         transform.function = \"None\")\nx13_mod <- x13(ipi_fr, x13_usr_spec)\nts_mod <- tramoseats(ipi_fr, spec = \"RSAfull\")\n```\n:::\n\n\n\n### CVS-CJO : exemples (3/8): decomposition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx13_mod$decomposition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMonitoring and Quality Assessment Statistics:\n      M stats\nM(1)    0.151\nM(2)    0.097\nM(3)    1.206\nM(4)    0.558\nM(5)    1.041\nM(6)    0.037\nM(7)    0.082\nM(8)    0.242\nM(9)    0.062\nM(10)   0.267\nM(11)   0.252\nQ       0.366\nQ-M2    0.399\n\nFinal filters: \nSeasonal filter:  3x5\nTrend filter:  13 terms Henderson moving average\n```\n:::\n:::\n\n\n### CVS-CJO : exemples (4/8): decomposition\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_mod$decomposition\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModel\nAR :  1 + 0.403230 B + 0.288342 B^2 \nD :  1 - B - B^12 + B^13 \nMA :  1 - 0.664088 B^12 \n\n\nSA\nAR :  1 + 0.403230 B + 0.288342 B^2 \nD :  1 - 2.000000 B + B^2 \nMA :  1 - 0.970348 B + 0.005940 B^2 - 0.005813 B^3 + 0.003576 B^4 \nInnovation variance:  0.7043507 \n\nTrend\nD :  1 - 2.000000 B + B^2 \nMA :  1 + 0.033519 B - 0.966481 B^2 \nInnovation variance:  0.06093642 \n\nSeasonal\nD :  1 + B + B^2 + B^3 + B^4 + B^5 + B^6 + B^7 + B^8 + B^9 + B^10 + B^11 \nMA :  1 + 1.328957 B + 1.105787 B^2 + 1.185470 B^3 + 1.067845 B^4 + 0.820748 B^5 + 0.632456 B^6 + 0.404457 B^7 + 0.245256 B^8 + 0.001615 B^9 - 0.055617 B^10 - 0.203557 B^11 \nInnovation variance:  0.04290744 \n\nTransitory\nAR :  1 + 0.403230 B + 0.288342 B^2 \nMA :  1 - 0.260079 B - 0.739921 B^2 \nInnovation variance:  0.05287028 \n\nIrregular\nInnovation variance:  0.2032994 \n```\n:::\n:::\n\n\n\n### CVS-CJO : exemples (5/8)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x13_mod$decomposition)\n```\n\n::: {.cell-output-display}\n![](02_R_et_JD_files/figure-beamer/unnamed-chunk-10-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n### CVS-CJO : exemples (6/8)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx13_mod$final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLast observed values\n             y        sa        t            s           i\nJan 2020 101.0 102.89447 102.9447  -1.89446776  -0.0502488\nFeb 2020 100.1 103.56224 102.9860  -3.46224124   0.5762734\nMar 2020  91.8  82.81896 103.2071   8.98103618 -20.3881828\nApr 2020  66.7  66.62390 103.6164   0.07610348 -36.9925073\nMay 2020  73.7  78.88976 104.0255  -5.18976181 -25.1357871\nJun 2020  98.2  87.30845 104.3450  10.89154932 -17.0365408\nJul 2020  97.4  92.39390 104.4861   5.00609785 -12.0921816\nAug 2020  71.7  97.51560 104.3380 -25.81559971  -6.8224392\nSep 2020 104.7  97.40102 103.9044   7.29897634  -6.5033820\nOct 2020 106.7  98.39408 103.3109   8.30592464  -4.9168409\nNov 2020 101.6 100.23574 102.7824   1.36426365  -2.5467131\nDec 2020  96.6  99.67219 102.4984  -3.07218537  -2.8261840\n\nForecasts:\n               y_f     sa_f      t_f          s_f         i_f\nJan 2021  94.41766 101.0272 102.4220  -6.60952495 -1.39481900\nFeb 2021  97.82331 101.6172 102.4196  -3.79385040 -0.80247216\nMar 2021 114.01485 102.1273 102.3712  11.88751670 -0.24388469\nApr 2021 102.04691 102.0672 102.2273  -0.02033583 -0.16002624\nMay 2021  95.95071 101.4262 102.0682  -5.47547024 -0.64200227\nJun 2021 112.61492 101.2166 101.9501  11.39833187 -0.73348910\nJul 2021 104.00289 101.5502 101.9316   2.45263829 -0.38137799\nAug 2021  79.03331 102.3155 102.0544 -23.28216183  0.26109558\nSep 2021 108.98851 102.3414 102.2480   6.64711680  0.09343944\nOct 2021 108.49736 102.1909 102.4372   6.30644391 -0.24626669\nNov 2021 106.32534 102.4451 102.6074   3.88025741 -0.16229864\nDec 2021  99.71313 102.9154 102.7518  -3.20223190  0.16356694\n```\n:::\n:::\n\n\n### CVS-CJO : exemples (7/8)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(x13_mod$final, first_date = 2012, type_chart = \"sa-trend\")\n```\n\n::: {.cell-output-display}\n![](02_R_et_JD_files/figure-beamer/unnamed-chunk-12-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n### CVS-CJO : exemples (8/8)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx13_mod$diagnostics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRelative contribution of the components to the stationary\nportion of the variance in the original series,\nafter the removal of the long term trend\n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle         1.625\n Seasonal     41.918\n Irregular     0.727\n TD & Hol.     1.851\n Others       55.678\n Total       101.800\n\nCombined test in the entire series\n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.042\n \n Identifiable seasonality present\n\nResidual seasonality tests\n                                      P.value\n qs test on sa                          0.974\n qs test on i                           0.779\n f-test on sa (seasonal dummies)        0.921\n f-test on i (seasonal dummies)         0.826\n Residual seasonality (entire series)   0.770\n Residual seasonality (last 3 years)    0.894\n f-test on sa (td)                      0.974\n f-test on i (td)                       0.988\n```\n:::\n:::\n\n\n\n\n## Manipuler des workspaces\n\n\n### Exporter un workspace\n\n\n::: {.cell}\n\n```{.r .cell-code}\njws <- new_workspace()\nnew_multiprocessing(jws, name = \"MP-1\")\nadd_sa_item(jws, multiprocessing = \"MP-1\",\n            sa_obj = x13_mod, name =  \"SA with X13 model 1 \")\nadd_sa_item(jws, multiprocessing =  \"MP-1\",\n            sa_obj = ts_mod, name = \"SA with TramoSeats model 1\")\nsave_workspace(jws, \"workspace.xml\")\n```\n:::\n\n\n![](img/workspace.png)\n\n### Importer un workspace (1/3)\n\n\\footnotesize\n\n\n::: {.cell}\n\n```{.r .cell-code}\njws <- load_workspace(\"workspace.xml\")\nget_ts(jws)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`MP-1`\n$`MP-1`$`SA with X13 model 1 `\n       Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\n1990  92.1  92.3 102.1  93.0  93.3 100.8  92.9  66.7  95.8 105.0  96.7  89.2\n1991  92.5  89.2  97.4  93.8  87.5 100.3  93.4  64.3  96.9 103.5  94.0  92.1\n1992  90.7  89.0  99.4  93.7  86.1 101.3  90.4  62.9  96.6  98.4  91.9  92.6\n1993  82.3  84.0  95.6  88.3  82.2  97.9  85.5  61.3  93.7  93.0  88.3  92.1\n1994  83.6  83.7  97.0  88.3  88.3 102.9  87.3  65.9  98.2  98.0  96.8  98.0\n1995  91.8  90.1 102.9  90.4  91.6 103.7  90.6  66.8  98.7 101.4  97.2  94.8\n1996  92.0  91.1  98.1  94.3  90.5 101.8  96.1  66.3  98.9 105.0  95.0  96.0\n1997  91.9  91.3  99.1 102.8  93.2 108.2 100.4  70.5 107.3 114.1  99.6 106.7\n1998  98.2  98.7 109.3 103.7  97.6 114.7 106.1  72.1 111.5 112.6 105.6 107.4\n1999  97.2  98.3 114.5 104.8  99.9 120.2 105.7  76.1 115.2 115.1 111.1 114.0\n2000 103.4 107.5 121.7 105.7 113.1 119.4 108.1  82.0 116.4 121.3 117.2 111.9\n2001 110.7 108.9 124.0 109.3 109.8 121.9 112.4  85.5 114.1 123.4 114.2 104.9\n2002 108.4 106.7 118.5 113.4 105.6 119.2 113.9  81.4 115.6 121.7 111.0 105.2\n2003 106.9 105.4 117.1 112.0 101.5 115.2 111.2  75.7 117.5 122.4 107.8 109.3\n2004 104.7 106.7 122.8 112.7 104.5 126.5 111.1  79.7 121.9 118.8 112.2 112.6\n2005 107.6 106.3 118.8 113.7 109.7 125.0 106.4  81.7 123.0 115.1 115.5 111.6\n2006 108.8 105.9 124.8 108.0 113.1 126.7 108.7  84.1 121.0 121.5 116.6 108.2\n2007 111.5 109.6 124.0 111.7 111.7 126.6 116.6  87.1 117.3 127.2 118.0 106.5\n2008 113.2 114.4 117.5 120.2 107.6 121.4 115.1  78.8 118.9 118.8  99.5  99.2\n2009  90.7  90.1 100.0  93.9  88.3 105.5  97.9  70.3 106.5 104.7  99.0  95.2\n2010  90.3  93.1 109.5 100.4  95.5 111.8 100.8  74.5 109.0 105.0 102.7 101.9\n2011  99.0 101.6 115.3 101.6 110.1 108.5 101.0  78.3 110.0 106.4 106.3 100.2\n2012  99.3  99.9 110.3  99.8  96.1 108.5 103.8  78.8 102.9 107.6 101.9  91.5\n2013  96.3  95.7 103.9 103.4  96.2 105.5 105.2  73.4 103.3 109.3  99.0  94.6\n2014  96.8  97.1 104.9 102.9  92.4 104.8 103.3  71.5 107.2 107.7  95.5  98.4\n2015  94.6  96.1 108.4 102.4  91.0 111.8 101.1  76.1 109.1 107.7 101.8  99.9\n2016  95.1  99.6 108.3 103.3  98.6 110.3  95.8  79.7 107.9 103.4 104.7  99.7\n2017  98.9  97.1 114.5  98.0 102.7 111.4  99.5  81.4 108.2 113.2 111.0  99.5\n2018 101.8  98.6 112.9 103.0  98.7 112.8 106.6  82.6 104.7 116.0 109.6  97.6\n2019 103.8 102.0 111.6 107.2 105.2 106.0 109.8  78.8 109.0 116.5 104.0  97.8\n2020 101.0 100.1  91.8  66.7  73.7  98.2  97.4  71.7 104.7 106.7 101.6  96.6\n\n$`MP-1`$`SA with TramoSeats model 1`\n       Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\n1990  92.1  92.3 102.1  93.0  93.3 100.8  92.9  66.7  95.8 105.0  96.7  89.2\n1991  92.5  89.2  97.4  93.8  87.5 100.3  93.4  64.3  96.9 103.5  94.0  92.1\n1992  90.7  89.0  99.4  93.7  86.1 101.3  90.4  62.9  96.6  98.4  91.9  92.6\n1993  82.3  84.0  95.6  88.3  82.2  97.9  85.5  61.3  93.7  93.0  88.3  92.1\n1994  83.6  83.7  97.0  88.3  88.3 102.9  87.3  65.9  98.2  98.0  96.8  98.0\n1995  91.8  90.1 102.9  90.4  91.6 103.7  90.6  66.8  98.7 101.4  97.2  94.8\n1996  92.0  91.1  98.1  94.3  90.5 101.8  96.1  66.3  98.9 105.0  95.0  96.0\n1997  91.9  91.3  99.1 102.8  93.2 108.2 100.4  70.5 107.3 114.1  99.6 106.7\n1998  98.2  98.7 109.3 103.7  97.6 114.7 106.1  72.1 111.5 112.6 105.6 107.4\n1999  97.2  98.3 114.5 104.8  99.9 120.2 105.7  76.1 115.2 115.1 111.1 114.0\n2000 103.4 107.5 121.7 105.7 113.1 119.4 108.1  82.0 116.4 121.3 117.2 111.9\n2001 110.7 108.9 124.0 109.3 109.8 121.9 112.4  85.5 114.1 123.4 114.2 104.9\n2002 108.4 106.7 118.5 113.4 105.6 119.2 113.9  81.4 115.6 121.7 111.0 105.2\n2003 106.9 105.4 117.1 112.0 101.5 115.2 111.2  75.7 117.5 122.4 107.8 109.3\n2004 104.7 106.7 122.8 112.7 104.5 126.5 111.1  79.7 121.9 118.8 112.2 112.6\n2005 107.6 106.3 118.8 113.7 109.7 125.0 106.4  81.7 123.0 115.1 115.5 111.6\n2006 108.8 105.9 124.8 108.0 113.1 126.7 108.7  84.1 121.0 121.5 116.6 108.2\n2007 111.5 109.6 124.0 111.7 111.7 126.6 116.6  87.1 117.3 127.2 118.0 106.5\n2008 113.2 114.4 117.5 120.2 107.6 121.4 115.1  78.8 118.9 118.8  99.5  99.2\n2009  90.7  90.1 100.0  93.9  88.3 105.5  97.9  70.3 106.5 104.7  99.0  95.2\n2010  90.3  93.1 109.5 100.4  95.5 111.8 100.8  74.5 109.0 105.0 102.7 101.9\n2011  99.0 101.6 115.3 101.6 110.1 108.5 101.0  78.3 110.0 106.4 106.3 100.2\n2012  99.3  99.9 110.3  99.8  96.1 108.5 103.8  78.8 102.9 107.6 101.9  91.5\n2013  96.3  95.7 103.9 103.4  96.2 105.5 105.2  73.4 103.3 109.3  99.0  94.6\n2014  96.8  97.1 104.9 102.9  92.4 104.8 103.3  71.5 107.2 107.7  95.5  98.4\n2015  94.6  96.1 108.4 102.4  91.0 111.8 101.1  76.1 109.1 107.7 101.8  99.9\n2016  95.1  99.6 108.3 103.3  98.6 110.3  95.8  79.7 107.9 103.4 104.7  99.7\n2017  98.9  97.1 114.5  98.0 102.7 111.4  99.5  81.4 108.2 113.2 111.0  99.5\n2018 101.8  98.6 112.9 103.0  98.7 112.8 106.6  82.6 104.7 116.0 109.6  97.6\n2019 103.8 102.0 111.6 107.2 105.2 106.0 109.8  78.8 109.0 116.5 104.0  97.8\n2020 101.0 100.1  91.8  66.7  73.7  98.2  97.4  71.7 104.7 106.7 101.6  96.6\n```\n:::\n:::\n\n\n### Importer un workspace (2/3)\n\n\\animategraphics[loop, autoplay, width=\\linewidth]{2.5}{img/gif/import_model/}{1}{114}\n\n\\footnotesize\nNote : animation visible sur Adobe Reader uniquement\n\n\n\n### Importer un workspace (3/3)\n\\footnotesize\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncompute(jws) # Important to get the Sa model\nmodels <- get_model(jws) # A progress bar is printed by default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMultiprocessing 1 on 1:\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n\n```{.r .cell-code}\n# To extract only one model\njmp <- get_object(jws, 1)\ncount(jmp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\njsa2 <- get_object(jmp, 2)\nget_name(jsa2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SA with TramoSeats model 1\"\n```\n:::\n\n```{.r .cell-code}\nmod <- get_model(jws, jsa2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMultiprocessing 1 on 1:\n\n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |===================================                                   |  50%\n  |                                                                            \n  |======================================================================| 100%\n```\n:::\n:::\n\n\n\n\n# Réduction du temps de calcul\n\n## Manipulation des objets Java\n\n### Manipuler des objets {{< fa brands java >}} (1/2)\n\n\\footnotesize\nLes fonctions peuvent être assez consommatrices en temps de calcul... surtout si l'on n'a besoin que d'un seul paramètre\n\n\\medskip\n\n{{< fa arrow-circle-right >}} \"Manipuler\" modèles Java : `jx13`, `jtramoseats`, `jregarima`, `jregarima_x13`, `jregarima_tramoseats` et `get_jmodel`\n\n\\medskip\n\n\n::: {.cell}\n\n```{.r .cell-code}\njx13_mod <- jx13(ipi_fr, x13_usr_spec)\n# To get the available outputs:\ntail(get_dictionary(jx13_mod))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"residuals.independence.value\" \"residuals.independence\"      \n[3] \"residuals.tdpeaks.value\"      \"residuals.tdpeaks\"           \n[5] \"residuals.seaspeaks.value\"    \"residuals.seaspeaks\"         \n```\n:::\n:::\n\n\n\n### Manipuler des objets {{< fa brands java >}}(2/2)\n\n\\footnotesize\n\n::: {.cell}\n\n```{.r .cell-code}\n# To get an indicator:\nget_indicators(jx13_mod, \"diagnostics.td-res-all\", \"diagnostics.ic-ratio\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$`diagnostics.td-res-all`\n[1] 0.1896922 0.9796182\nattr(,\"description\")\n[1] \"F with 6 degrees of freedom in the nominator and 353 degrees of freedom in the denominator\"\n\n$`diagnostics.ic-ratio`\n[1] 5.050485\n```\n:::\n\n```{.r .cell-code}\n# To get the previous R output\nx13_mod <- jSA2R(jx13_mod)\n```\n:::\n\n\n{{< fa arrow-circle-right >}} L'output peut être personnalisé \n\n\\medskip\n\n{{< fa exclamation-triangle >}} Pas d'erreur renvoyé par `jx13()` avec une \"mauvaise\" SA (preliminary check...) and `get_indicators()` renvoie objet `NULL`\n\n\n## Benchmarking\n\n### Bencharking with X-13 on French IPI\n\n\\footnotesize\nR version 4.2.0 (2022-04-22), x86_64-apple-darwin17.0, Windows 7 x64 (build 7601) Service Pack 1\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](02_R_et_JD_files/figure-beamer/unnamed-chunk-19-1.pdf){fig-pos='H'}\n:::\n:::\n\n\n\n# Utilisation de RJDemetra pour améliorer la production\n\n## Autour de RJDemetra\n\n### Exemples d'utilisation de RJDemetra\n\n- rjdqa : package pour aider à évaluer la qualité de la désaisonnalisation (tableau de bord)\n\n{{< fa brands github >}}{} https://github.com/AQLT/rjdqa\n\n- ggdemetra : intégrer la désaisonnalisation à ggplot2\n\n{{< fa brands github >}}{} https://github.com/AQLT/ggdemetra\n\n- rjdmarkdown : faciliter les rapports automatiques avec rmarkdown\n\n{{< fa brands github >}}{} https://github.com/AQLT/rjdmarkdown\n\n- rjdworkspace : manipuler les workspaces\n\n{{< fa brands github >}}{} https://github.com/InseeFrLab/rjdworkspace\n\n- persephone (expérimental) : faciliter la production de séries CVS-CJO au sein de l'institut (graphiques interactifs, tableaux de bord...)\n\n{{< fa brands github >}}{} https://github.com/statistikat/persephone\n\n\n# Lancement du JWSACruncher depuis R\n\n### Le JWSACruncher\n\n\nObjectifs du JWSACruncher : mettre à jour un workspace de JDemetra+ et exporter les résultats à partir de la console (en *batch*), sans devoir ouvrir JDemetra+ : très utile pour la production. Quelques liens :\n\n- pour télécharger le JWSACruncher <https://github.com/jdemetra/jwsacruncher/releases>.\n\n- l'aide associée au JWSACruncher <https://github.com/jdemetra/jwsacruncher/wiki>.\n\n\n### Le JWSACruncher\n\nPour lancer le JWSACruncher de JDemetra+ il faut :\n\n- le JWSACruncher\\ ;\n\n- un fichier contenant les paramètres sur la méthode de rafraîchissement à utilisée pour mettre à jour le workspace et sur les paramètres d'export\\ ;  \n\n- un workspace valide de JDemetra+.\n\nSur le CRAN il y a le package `rjwsacruncher` (https://github.com/AQLT/rjwsacruncher) qui facilite son utilisation !\n\n### Utilisation de rjwsacruncher (2/3)\n\nTrois options vont être utiles : `default_matrix_item` (diagnostics à exporter), `default_tsmatrix_series` (séries temporelles à exporter) et `cruncher_bin_directory` (chemin vers le cruncher).\n\nPour afficher les valeurs :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetOption(\"default_matrix_item\")\ngetOption(\"default_tsmatrix_series\")\ngetOption(\"cruncher_bin_directory\")\n```\n:::\n\n\nUtiliser la fonction `options()` pour les modifier. Par exemple :\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(default_matrix_item = c(\"likelihood.aic\",\n                                \"likelihood.aicc\",\n                                \"likelihood.bic\",\n                                \"likelihood.bicc\"))\noptions(default_tsmatrix_series = c(\"sa\", \"sa_f\"))\noptions(cruncher_bin_directory =\n          \"D:/jwsacruncher-2.2.0/jdemetra-cli-2.2.0/bin\")\n```\n:::\n\n\n### Utilisation de JDCruncheR (3/3)\n\nUne fois les trois options précédentes validées le plus simple est d'utiliser la fonction `cruncher_and_param()` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncruncher_and_param() # lancement avec paramètres par défaut\n\ncruncher_and_param(workspace = \"D:/workspace.xml\",\n                   # Pour ne pas renommer les noms des dossiers exportés :\n                   rename_multi_documents = FALSE,\n                   policy = \"lastoutliers\")\n```\n:::\n\n\nPour voir l'aide associée à une fonction, utiliser `help()` ou `?` : \n\n\n::: {.cell}\n\n```{.r .cell-code}\n?cruncher_and_param\nhelp(cruncher_and_param)\n```\n:::\n\n\n\n\n# R et JDemetra+ 3.0\n\n### R et JDemetra+ 3.0 {.allowframebreaks}\n\nLa version 3 de JDemetra+ est accompagnée de nombreux packages R uniquement disponible sur [{{< fa brands github >}} github.com/rjdemetra](https://github.com/rjdemetra) :\n\n- [`rjd3toolkit`](https://github.com/rjdemetra/rjd3toolkit) : boite à outils (créations de régresseurs, de calendriers, tests, etc.)\n\n- [`rjd3x13`](https://github.com/rjdemetra/rjd3x13) et [`rjd3tramoseats`](https://github.com/rjdemetra/rjd3tramoseats) : méthodes X-13 et TRAMO-SEATS.\n\n- [`rjdemetra3`](https://github.com/rjdemetra/rjdemetra3) : manipulation de workspaces\n\n- [`rjd3x11plus`](https://github.com/rjdemetra/rjd3x11plus), [`rjd3stl`](https://github.com/rjdemetra/rjd3stl) et [`rjd3highfreq`](https://github.com/rjdemetra/rjd3highfreq) : différentes méthodes pour la désaisonnalisation de séries hautes fréquences\\\nExemples : https://github.com/palatej/test_rjd3hf\n\n- [`rjd3filters`](https://github.com/rjdemetra/rjd3filters) : manipulation de moyennes mobiles\n\n- [`rjd3sts`](https://github.com/rjdemetra/rjd3sts) : interface simple autour des modèles espace-état et des *structural time series*\\\nExemples : https://github.com/palatej/test_rjd3sts\n\n- [`rjd3bench`](https://github.com/rjdemetra/rjd3bench) : *Benchmarking* (uni et multivarié) et désagrégation temporelle\\\nExemples : https://github.com/palatej/test_rjd3bench\n\n- [`rjd3revisions`](https://github.com/rjdemetra/rjd3revisions) : analyse des révisions\n\n- [`ggdemetra3`](https://github.com/AQLT/ggdemetra3) : version 3 de `ggdemetra`\n\n\n### Bibliographie\n\\footnotesize\n\n\\begin{thebibliography}{999}\n\\bibitem{RJDemetra} Alain Quartier-la-Tente, Anna Michalek, Jean Palate and Raf Baeyens (2021). \\emph{RJDemetra: Interface to 'JDemetra+' Seasonal Adjustment Software}. \\url{https://github.com/jdemetra/RJDemetra}\n\\bibitem{rjdworkspace} Alain Quartier-la-Tente (2021). rjdworkspace: Manipulation of JDemetra+ Workspaces. \\url{https://github. com/InseeFrLab/rjdworkspace}. \n\\bibitem{rjdqa} Alain Quartier-la-Tente. \\emph{rjdqa: Quality Assessment for Seasonal Adjustment}.\\url{https://github.com/AQLT/rjdqa}.\n\\bibitem{rjdmarkdown} Alain Quartier-la-Tente (2020). \\emph{rjdmarkdown: 'rmarkdown' Extension for Formatted 'RJDemetra' Outputs}. R package version 0.2.0. \\url{https://github.com/AQLT/rjdmarkdown}.\n\\bibitem{ggdemetra} Alain Quartier-la-Tente. \\emph{ggdemetra: 'ggplot2' Extension for Seasonal and Trading Day Adjustment with 'RJDemetra'}. \\url{https://github.com/AQLT/ggdemetra}.\n\\bibitem{rjwsacruncher} Alain Quartier-la-Tente (2019). \\emph{rjwsacruncher: Interface to the 'JWSACruncher' of 'JDemetra+'}. \\url{https://github.com/AQLT/rjwsacruncher}\n\\bibitem{docInsee} Anna Smyk, Alice Tchang (2021). \\emph{R Tools for JDemetra+, Seasonal adjustment made easier}. Insee, Document de travail n° M2021/01. \\url{https://www.insee.fr/fr/statistiques/5019786}.\n\\end{thebibliography}\n\n\n",
    "supporting": [
      "02_R_et_JD_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": null,
    "postProcess": false
  }
}