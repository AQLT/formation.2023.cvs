{
  "hash": "a9079c4e92fae198baf2151ef0759b2f",
  "result": {
    "markdown": "---\ntitle: \"1 - R et JDemetra+\"\n---\n\n\n\n\n> L'objectif de ce TP est d'apprendre à manipuler JDemetra+ sous R à travers le package RJDemetra.\n\nPour manipuler JDemetra+ sous R il y a actuellement deux façons :\n\n1.  Utiliser le [JWSACruncher](https://github.com/jdemetra/jwsacruncher) qui permet, à partir de la console, de mettre à jour un workspace JDemetra+ et d'exporter les résultats sans devoir ouvrir le logiciel.\nPour faciliter son utilisation depuis R, le package `rjwsacruncher` peut être utilisé (voir [TP5 - JDemetra+ en production](R_5_JD_in_production.qmd)).\n\n2.  Utiliser le package `RJDemetra` qui permet d'effectuer des désaisonnalisations avec les mêmes algorithmes et paramètres que JDemetra+ et de manipuler des workspaces.\n\nDans ce TP on utilisera les données du package `RJDemetra` mais n'hésitez pas à utiliser vos propres séries !\n\n\nPour faire de la désaisonnalisation sous R il existe plusieurs packages :\n\n-   `seasonal` et `x12` qui permettent de faire du X-13ARIMA-SEATS en utilisant les programmes du US Census Bureau\n\n-   `RJDemetra` qui est une interface R à JDemetra+ et c'est ce package que l'on va étudier.\n\n`RJDemetra` est sur le CRAN et se base sur les librairies Java de JDemetra+.\nPour l'utiliser il faut avoir Java 8 ou plus.\nEn cas de problème d'installation voir la page : <https://github.com/jdemetra/rjdemetra/wiki/Installation-manual>.\n\nLe package a aussi un site web (<https://jdemetra.github.io/rjdemetra/>).\n\n`RJDemetra` permet :\n\n-   De faire des modèles RegARIMA, TRAMO-SEATS and X-13-ARIMA comme dans JDemetra+ en définissant sa propre spécification\n\n-   Manipuler les workspaces de JDemetra+ :\n\n-   Importer les modèles workspaces sauvegardés par JDemetra+\n\n-   Exporter les modèles créés sous RJDemetra\n\n\nUne nouvelle version de `RJDemetra` est en cours de développement autour de la version 3.0 de JDemetra+. \nElle nécessite toutefois d'avoir une version de Java supérieure à la version 17 et elle n'est pas sur le CRAN.\nLes fonctionnalités de `RJDemetra` (et les nouvelles) sont divisées en plusieurs packages disponibles sous <https://github.com/rjdemetra>.\nDans cette formation, nous utiliserons les packages suivants `RJDemetra`, `rjd3toolkit`, `rjd3tramoseats`, `rjd3providers`, `rjdemetra3` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages_to_install <- c(\"RJDemetra\", \"remotes\")\n\npackages <- packages_to_install[! packages_to_install %in% installed.packages()[,\"Package\"]]\nif (length(packages) > 0) {\n\tinstall.packages(packages)\n}\npackages_to_install_git <- c(\"rjd3toolkit\", \"rjd3x13\", \"rjd3tramoseats\", \"rjd3providers\", \"rjdemetra3\")\npackages_git <- packages_to_install_git[! packages_to_install_git %in% installed.packages()[,\"Package\"]]\n\nif (length(packages_git) > 0) {\n\t# # Configurer si besoin le proxy\n\t# proxy <- \"proxy_a_definir\"\n\t# Sys.setenv(HTTPS_PROXY = proxy)\n\tremotes::install_github(\n\t\tsprintf(\"rjdemetra/%s\", packages_git),\n\t\t# option utile dans certaines installations portables de Java :\n\t\tINSTALL_opts = \"--no-multiarch\")\n}\nlibrary(RJDemetra)\n```\n:::\n\n\n\n# RJDemetra v2\n\nCommencez par charger le package `RJDemetra` :\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\n```\n:::\n\n\n\n## Créer une specification {#sec-spec-jd2}\n\nDans les prochains exercices, la série utilisée sera `ipi_c_eu[, \"FR\"]` qui est l'IPI français.\nVous pouvez bien sûr adapter le code pour utiliser vos propres séries.\nLes fonctions utilisées seront `x13()`, `x13_spec()`, `regarima_x13`, `regarima_x13_spec` ou `regarima`.\nLe détail des spécifications pré-définies par JDemetra+ sont disponibles [ici](/PDF/Predefined_specifications.pdf).\n\n\n::: callout-note\n## Exercice\nFaire la désaisonnalisation d'une série avec X-13 avec la spécification suivante :\n\n- détection automatique du schéma de décomposition, des outliers et du modèle ARIMA ;\n\n- une correction des jours ouvrables \"working days\" et un effet graduel de Pâques.\n\nFaire ensuite un graphique avec la série brute et la série désaisonnalisée.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nUtiliser la spécification `RSA4c` pour la désaisonnalisation.\n\nSi le modèle créé s'appelle `mysa`, regarder les valeurs de `mysa$final`, `mysa$final$series` et `mysa$final$forecasts`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RJDemetra)\nmysa <- x13(ipi_c_eu[, \"FR\"], spec = \"RSA4c\")\nmysa\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRegARIMA\ny = regression model + arima (2, 1, 1, 0, 1, 1)\nLog-transformation: no\nCoefficients:\n          Estimate Std. Error\nPhi(1)     0.05291      0.108\nPhi(2)     0.18672      0.074\nTheta(1)  -0.52137      0.103\nBTheta(1) -0.66132      0.042\n\n             Estimate Std. Error\nWeek days      0.6927      0.031\nLeap year      2.0903      0.694\nEaster [1]    -2.5476      0.442\nTC (4-2020)  -35.6481      2.092\nAO (3-2020)  -21.1492      2.122\nAO (5-2011)   13.1869      1.810\nLS (11-2008)  -9.2744      1.758\nLS (1-2009)   -7.2838      1.756\n\n\nResidual standard error: 2.193 on 346 degrees of freedom\nLog likelihood = -795.1, aic =  1616 aicc =  1617, bic(corrected for length) = 1.767\n\n\n\nDecomposition\nMonitoring and Quality Assessment Statistics:\n      M stats\nM(1)    0.127\nM(2)    0.079\nM(3)    1.094\nM(4)    0.558\nM(5)    1.093\nM(6)    0.022\nM(7)    0.085\nM(8)    0.242\nM(9)    0.064\nM(10)   0.261\nM(11)   0.247\nQ       0.355\nQ-M2    0.389\n\nFinal filters: \nSeasonal filter:  3x5\nTrend filter:  13 terms Henderson moving average\n\n\nFinal\nLast observed values\n             y        sa        t           s           i\nJan 2020 101.0 102.87273 103.0457  -1.8727280  -0.1730003\nFeb 2020 100.1 103.69025 103.0626  -3.5902540   0.6276448\nMar 2020  91.8  82.69170 103.2654   9.1083000 -20.5736602\nApr 2020  66.7  66.55184 103.6945   0.1481625 -37.1426277\nMay 2020  73.7  79.28883 104.1379  -5.5888279 -24.8490764\nJun 2020  98.2  87.35362 104.4539  10.8463757 -17.1002284\nJul 2020  97.4  92.26057 104.5518   5.1394323 -12.2912806\nAug 2020  71.7  97.54392 104.3369 -25.8439193  -6.7929846\nSep 2020 104.7  97.75728 103.8361   6.9427184  -6.0788659\nOct 2020 106.7  97.87016 103.1969   8.8298396  -5.3267823\nNov 2020 101.6 100.01475 102.6601   1.5852540  -2.6453446\nDec 2020  96.6  99.61740 102.4081  -3.0173983  -2.7907314\n\nForecasts:\n               y_f     sa_f      t_f         s_f        i_f\nJan 2021  94.29728 101.0937 102.3876  -6.7963909 -1.2939310\nFeb 2021  97.89298 101.6869 102.4525  -3.7939488 -0.7655396\nMar 2021 113.65190 102.1478 102.4593  11.5041248 -0.3115701\nApr 2021 102.34532 102.1806 102.3419   0.1647274 -0.1612727\nMay 2021  96.14552 101.6436 102.1712  -5.4980759 -0.5276194\nJun 2021 112.15785 101.2156 102.0241  10.9422549 -0.8085520\nJul 2021 104.38495 101.5439 101.9635   2.8410057 -0.4195241\nAug 2021  79.02901 102.3820 102.0412 -23.3530134  0.3408366\nSep 2021 109.40288 102.3705 102.1977   7.0323700  0.1728109\nOct 2021 108.22472 101.8558 102.3655   6.3689511 -0.5096780\nNov 2021 106.22014 102.4265 102.5266   3.7936049 -0.1000754\nDec 2021  99.67523 102.9462 102.6812  -3.2709156  0.2649189\n\n\nDiagnostics\nRelative contribution of the components to the stationary\nportion of the variance in the original series,\nafter the removal of the long term trend\n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle         1.830\n Seasonal     51.089\n Irregular     0.927\n TD & Hol.     2.179\n Others       44.916\n Total       100.941\n\nCombined test in the entire series\n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.014\n \n Identifiable seasonality present\n\nResidual seasonality tests\n                                      P.value\n qs test on sa                          0.924\n qs test on i                           0.643\n f-test on sa (seasonal dummies)        0.671\n f-test on i (seasonal dummies)         0.453\n Residual seasonality (entire series)   0.415\n Residual seasonality (last 3 years)    0.954\n f-test on sa (td)                      0.091\n f-test on i (td)                       0.333\n\n\nAdditional output variables\n```\n:::\n\n```{.r .cell-code}\ny <- mysa$final$series[,\"y\"]\n# De façon équivalente :\ny <- get_ts(mysa)\nsa <- mysa$final$series[,\"sa\"]\nplot(y)\nlines(sa, col = \"red\")\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# ou on peut directement utiliser les fonctions de RJDemetra :\nplot(mysa, first_date = 2000, #Pour n'afficher le graphique qu'à partir de 200\n\t type_chart = \"sa-trend\" # Pour faire le graphique avec y, sa et tendance\n)\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\nPour des graphiques `ggplot2`, on peut également utiliser le package `ggdemetra` :\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggdemetra)\n# y <- ggdemetra::raw(mysa)\n# sa <- ggdemetra::seasonaladj(mysa)\np_sa <- \n\tggplot(data = ggdemetra::ts2df(y), \n\t\t   mapping = aes(x = date, y = y)) +\n\tgeom_line(color = \"#F0B400\") +\n\tlabs(title = \"Y, Sa, Trend\",\n\t\t x = NULL, y = NULL) +\n\tgeom_sa(component = \"y_f\", linetype = 2,\n\t\t\tspec = x13_spec(mysa), frequency = 12,\n\t\t\tcolor = \"#F0B400\") + \n\tgeom_sa(component = \"sa\", color = \"#155692\") +\n\tgeom_sa(component = \"sa_f\", color = \"#155692\", linetype = 2)+ \n\tgeom_sa(component = \"t\", color = \"#1E6C0B\") +\n\tgeom_sa(component = \"t_f\", color = \"#1E6C0B\", linetype = 2) + \n\ttheme_bw()\n```\n:::\n\n\n:::\n\n::: callout-note\n## Exercice\nModifier le modèle précédent pour enlever l'effet graduel de Pâques.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nspec_sans_easter <- x13_spec(mysa,\n\t\t\t\t\t\t\t easter.enabled = FALSE)\nmysa2 <- x13(ipi_c_eu[, \"FR\"], spec_sans_easter)\nmysa2$regarima\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (2, 1, 1, 0, 1, 1)\nLog-transformation: yes\nCoefficients:\n          Estimate Std. Error\nPhi(1)     0.05032      0.118\nPhi(2)     0.09575      0.082\nTheta(1)  -0.55559      0.110\nBTheta(1) -0.73033      0.039\n\n              Estimate Std. Error\nWeek days     0.007179      0.000\nAO (5-2011)   0.124297      0.018\nLS (11-2008) -0.086926      0.017\nLS (1-2009)  -0.071005      0.017\n\n\nResidual standard error: 0.02133 on 338 degrees of freedom\nLog likelihood =   838, aic =  1548 aicc =  1548, bic(corrected for length) = -7.561\n```\n:::\n:::\n\n:::\n\n::: callout-note\n## Exercice\nCalculer les p-valeurs associées au modèle Reg-ARIMA de la précédente spécification.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nRécupérer le modèle Reg-ARIMA et utiliser la fonction `summary()`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_sum <- summary(mysa2$regarima)\nreg_sum\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ny = regression model + arima (2, 1, 1, 0, 1, 1)\n\nModel: RegARIMA - X13\nEstimation span: from 1-1990 to 12-2019\nLog-transformation: yes\nRegression model: no mean, trading days effect(1), no leap year effect, no Easter effect, outliers(3)\n\nCoefficients:\nARIMA: \n          Estimate Std. Error  T-stat Pr(>|t|)    \nPhi(1)     0.05032    0.11801   0.426    0.670    \nPhi(2)     0.09575    0.08224   1.164    0.245    \nTheta(1)  -0.55559    0.10956  -5.071 6.45e-07 ***\nBTheta(1) -0.73033    0.03938 -18.545  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model: \n               Estimate Std. Error T-stat Pr(>|t|)    \nWeek days     0.0071788  0.0003171 22.637  < 2e-16 ***\nAO (5-2011)   0.1242970  0.0180390  6.890 2.63e-11 ***\nLS (11-2008) -0.0869263  0.0171661 -5.064 6.69e-07 ***\nLS (1-2009)  -0.0710049  0.0171449 -4.141 4.34e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nResidual standard error: 0.02133 on 338 degrees of freedom\nLog likelihood =   838, aic =  1548, aicc =  1548, bic(corrected for length) = -7.561\n```\n:::\n:::\n\nOn peut récupérer ces valeurs en exploitant l'objet `reg_sum` :\n\n::: {.cell}\n\n```{.r .cell-code}\nreg_sum$coefficients\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$arima\n             Estimate Std. Error     T-stat     Pr(>|t|)\nPhi(1)     0.05031546 0.11801332   0.426354 6.701142e-01\nPhi(2)     0.09575287 0.08224054   1.164303 2.451013e-01\nTheta(1)  -0.55559277 0.10955864  -5.071191 6.449100e-07\nBTheta(1) -0.73033107 0.03938071 -18.545401 0.000000e+00\n\n$regression\n                 Estimate   Std. Error    T-stat     Pr(>|t|)\nWeek days     0.007178836 0.0003171301 22.636876 0.000000e+00\nAO (5-2011)   0.124296961 0.0180390210  6.890449 2.628564e-11\nLS (11-2008) -0.086926347 0.0171661398 -5.063826 6.685537e-07\nLS (1-2009)  -0.071004892 0.0171448840 -4.141462 4.338403e-05\n\n$fixed_out\nNULL\n\n$fixed_var\nNULL\n```\n:::\n:::\n\n\n:::\n\n## Créer un workspace\n\nDans cette partie nous allons créer un workspace depuis R.\nPour cela les fonctions qui peuvent être utilisées sont `new_workspace()`, `load_workspace()`, `new_multiprocessing()`, `add_sa_item()`, `save_workspace()`, `compute()`, `get_object()`, `get_name()`, `get_ts()` ou `count()`.\n\n::: callout-note\n## Exercice\nCréer un workspace qui va contenir une série désaisonnalisée selon 3 spécifications différentes.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\njws <- new_workspace()\nnew_multiprocessing(jws, \"MP-1\")\nadd_sa_item(jws, \"MP-1\", mysa, \"X13 avec Pâques\")\nadd_sa_item(jws, \"MP-1\", mysa2, \"X13 sans Pâques\")\nadd_sa_item(jws, \"MP-1\", tramoseats(ipi_c_eu[, \"FR\"]), \"TRAMO-SEATS\")\nsave_workspace(jws, \"mon_premier_workspace.xml\")\n```\n:::\n\n:::\n\n::: callout-note\n## Exercice\nImporter le workspace précédent et récupérer :  \n\n- Le nom du premier multi-processing\n- Le nombre de modèles dans ce premier multi-processing\n- L'ensemble des séries brutes\n- Le 2ème modèle\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\njws <- load_workspace(\"mon_premier_workspace.xml\")\ncompute(jws)\ncount(jws) # Nombre de multiprocessing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\njmp1 <- get_object(jws, 1) # Le premier multiprocessing\nget_name(jmp1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MP-1\"\n```\n:::\n\n```{.r .cell-code}\ncount(jmp1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nall_y <- get_ts(jmp1) # toutes les séries brutes\nmodel2 <- get_object(jmp1, 2) # On récupère l'objet associé au 2ème modèle\nget_model(model2, jws)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRegARIMA\ny = regression model + arima (2, 1, 1, 0, 1, 1)\nLog-transformation: yes\nCoefficients:\n          Estimate Std. Error\nPhi(1)     0.05032      0.118\nPhi(2)     0.09575      0.082\nTheta(1)  -0.55559      0.110\nBTheta(1) -0.73033      0.039\n\n              Estimate Std. Error\nWeek days     0.007179      0.000\nAO (5-2011)   0.124297      0.018\nLS (11-2008) -0.086926      0.017\nLS (1-2009)  -0.071005      0.017\n\n\nResidual standard error: 0.02133 on 338 degrees of freedom\nLog likelihood =   838, aic =  1548 aicc =  1548, bic(corrected for length) = -7.561\n\n\n\nDecomposition\nMonitoring and Quality Assessment Statistics:\n      M stats\nM(1)    0.080\nM(2)    0.044\nM(3)    0.925\nM(4)    0.324\nM(5)    1.018\nM(6)    0.172\nM(7)    0.075\nM(8)    0.207\nM(9)    0.069\nM(10)   0.229\nM(11)   0.207\nQ       0.311\nQ-M2    0.344\n\nFinal filters: \nSeasonal filter:  3x5\nTrend filter:  13 terms Henderson moving average\n\n\nFinal\nLast observed values\n             y       sa        t         s         i\nJan 2019 103.9 104.9497 104.8872 0.9899977 1.0005966\nFeb 2019 101.9 106.2130 105.1277 0.9593928 1.0103234\nMar 2019 111.0 104.7070 105.2207 1.0601007 0.9951182\nApr 2019 107.4 105.0688 105.1200 1.0221871 0.9995130\nMay 2019 105.5 108.7078 104.9337 0.9704918 1.0359658\nJun 2019 105.8 101.5038 104.6881 1.0423256 0.9695826\nJul 2019 110.1 105.4918 104.3766 1.0436828 1.0106850\nAug 2019  78.7 102.6361 104.0097 0.7667871 0.9867928\nSep 2019 108.5 104.0439 103.5870 1.0428287 1.0044106\nOct 2019 116.8 104.5857 103.1442 1.1167879 1.0139754\nNov 2019 103.8 101.7786 102.7722 1.0198610 0.9903319\nDec 2019  97.7 101.5883 102.5735 0.9617252 0.9903948\n\nForecasts:\n               y_f     sa_f      t_f       s_f       i_f\nJan 2020 101.86190 102.9804 102.5981 0.9891385 1.0037265\nFeb 2020 100.79119 103.1440 102.8002 0.9771887 1.0033443\nMar 2020 111.43956 102.5781 103.0224 1.0863878 0.9956869\nApr 2020 105.54428 103.3790 103.2028 1.0209447 1.0017079\nMay 2020  96.34392 104.3346 103.2155 0.9234131 1.0108422\nJun 2020 112.45079 102.5347 103.0496 1.0967099 0.9950029\nJul 2020 106.92345 102.3231 102.8558 1.0449593 0.9948203\nAug 2020  76.61765 102.5744 102.7208 0.7469472 0.9985747\nSep 2020 110.47115 103.3476 102.6644 1.0689277 1.0066554\nOct 2020 111.53872 102.2010 102.6987 1.0913668 0.9951530\nNov 2020 104.52886 102.5479 102.7719 1.0193176 0.9978206\nDec 2020 101.73775 103.4319 102.9459 0.9836210 1.0047204\n\n\nDiagnostics\nRelative contribution of the components to the stationary\nportion of the variance in the original series,\nafter the removal of the long term trend\n Trend computed by Hodrick-Prescott filter (cycle length = 8.0 years)\n           Component\n Cycle         1.984\n Seasonal     62.978\n Irregular     0.998\n TD & Hol.     2.273\n Others       33.676\n Total       101.909\n\nCombined test in the entire series\n Non parametric tests for stable seasonality\n                                                          P.value\n   Kruskall-Wallis test                                      0.000\n   Test for the presence of seasonality assuming stability   0.000\n   Evolutive seasonality test                                0.429\n \n Identifiable seasonality present\n\nResidual seasonality tests\n                                      P.value\n qs test on sa                          1.000\n qs test on i                           0.965\n f-test on sa (seasonal dummies)        0.625\n f-test on i (seasonal dummies)         0.474\n Residual seasonality (entire series)   0.779\n Residual seasonality (last 3 years)    0.878\n f-test on sa (td)                      0.076\n f-test on i (td)                       0.385\n\n\nAdditional output variables\n```\n:::\n:::\n\n:::\n\n## Manipuler les objets Java\n\nL'objectif de cette partie est de manipuler la fonction `jx13()` pour gagner en temps de calcul.\n\n::: callout-note\n## Exercice\nCréer un modèle à partir de la fonction `jx13()` et la spécification sans effet graduel de pâques crée dans la section [-@sec-spec-jd2].\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmyjsa <- jx13(ipi_c_eu[, \"FR\"], spec_sans_easter)\nget_indicators(myjsa, \"sa\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$sa\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n1990  93.27297  96.29529  94.47992  93.73334  93.94507  92.83948  94.28898\n1991  93.61809  93.12145  92.56800  92.23966  88.02740  94.55282  92.48219\n1992  91.62891  91.43164  92.38484  92.19526  91.08704  90.59578  89.51814\n1993  87.30634  87.99736  86.85921  86.97894  86.99296  87.29234  86.76534\n1994  88.69622  87.77278  88.37550  89.30617  91.27332  91.48108  90.65425\n1995  95.09916  94.52731  93.92731  93.90941  92.37904  92.04264  93.77960\n1996  93.06670  91.54362  94.26169  93.30918  91.32878  94.96354  94.26156\n1997  93.06742  95.67044  95.13059 101.85852  96.43204  98.44794  98.23010\n1998 102.13804 103.25275 102.01932 102.89690 103.62209 101.81934 103.60992\n1999 103.71964 102.64444 103.76759 104.04665 106.13300 106.82584 105.69365\n2000 110.38789 107.38428 109.60527 110.17270 114.61835 106.35539 110.67086\n2001 112.45025 113.34404 113.88119 110.73914 111.61677 111.49774 112.13527\n2002 110.26696 110.99285 111.13280 111.58735 107.54579 111.87216 110.92070\n2003 108.72641 109.77205 109.75157 109.85823 105.81090 105.36978 108.56247\n2004 109.12622 109.43552 109.52322 110.42603 111.47708 112.70525 111.38248\n2005 114.72877 111.07384 106.23729 114.40231 113.83685 111.14636 109.33782\n2006 112.84431 110.57123 111.88826 111.79247 114.34733 112.62975 111.48879\n2007 112.53191 114.29580 114.23700 113.06787 112.93424 115.43386 116.32302\n2008 114.06045 113.94480 111.07963 118.83142 111.92185 110.96502 111.54674\n2009  93.60983  93.32624  92.17978  92.82197  94.61843  94.29186  94.42552\n2010  95.51379  96.12075  98.46494  99.01596 102.81820 100.22951  99.30088\n2011 104.88512 104.72507 103.63569 102.25128 116.10802  97.55663 101.60353\n2012 102.83064  98.48657 101.60323  99.95552  99.30289 100.25687 101.48753\n2013  97.45647  98.45690  97.93752 100.35136  99.79029 100.14504 100.08302\n2014  97.89835 100.00657  98.78845  99.56271  98.29814  97.26484  98.38400\n2015  98.27255  99.53811  99.50288  99.07983  99.28072 101.49169  96.66780\n2016 101.32397  99.22467  96.95194 102.97678 105.03035 100.37169  96.68839\n2017 102.72859 101.41668 102.63069 100.60801 106.58076 101.54655 100.67684\n2018 103.19713 103.14126 103.70513 103.35321 102.04279 105.47625 105.16178\n2019 104.94974 106.21301 104.70704 105.06883 108.70777 101.50380 105.49182\n           Aug       Sep       Oct       Nov       Dec\n1990  92.81532  93.42471  93.21965  92.25071  90.06120\n1991  91.72254  92.21808  91.96428  92.02285  90.46195\n1992  91.95223  89.69252  89.81277  90.02832  88.33305\n1993  87.30196  87.03081  87.21300  84.45288  87.46656\n1994  91.37247  91.19741  91.98386  92.78677  95.17153\n1995  92.38821  93.99473  92.85706  93.36671  94.38969\n1996  93.75684  94.14529  93.72433  93.79062  93.43034\n1997 101.81145  99.64928 101.86478 100.90774 101.70138\n1998 103.62658 103.60456 103.09096 104.46065 102.99964\n1999 106.07083 107.12621 108.29389 107.17738 110.10121\n2000 111.01860 110.92744 111.42763 113.10692 114.51591\n2001 115.50617 111.31601 110.65583 110.20538 108.13496\n2002 112.75124 109.55689 109.18036 109.90888 106.38982\n2003 107.51695 108.10694 110.01758 109.50133 108.16481\n2004 110.31329 111.75188 112.44658 108.46909 111.73847\n2005 110.00423 112.59573 109.23754 111.65979 113.81029\n2006 112.62602 113.48750 112.76155 112.55067 113.59525\n2007 115.82841 112.91803 115.49734 113.69439 112.28630\n2008 109.36385 109.09852 108.03726 100.63716  99.86454\n2009  96.91866  97.94748  97.85917  97.60414  96.07651\n2010  99.54513 100.43464 100.75477  98.83302 102.97020\n2011 101.60617 101.45456 102.21445 102.59847 103.85017\n2012 101.83135  99.96547  98.23490  98.64730  97.23489\n2013  96.84385  97.95614  99.86479  98.42704  97.79728\n2014  96.12996  99.28707  98.34888  97.27581  99.01780\n2015 102.05354 101.35873 100.66252 100.76102 100.45864\n2016 101.62022 100.64268  98.76241 100.83623 102.82647\n2017 103.73341 103.82246 105.29816 106.59767 105.53516\n2018 105.03058 103.00706 104.49092 104.89205 103.66170\n2019 102.63605 104.04393 104.58566 101.77858 101.58827\n```\n:::\n:::\n\n:::\n\n::: callout-note\n## Exercice\nToujours avec la même spécification, extraire les révisions de la séries désaisonnalisée du point de janvier 2005 (i.e. : série désaisonnalisée lorsqu'on a les données jusqu'en janvier 2005, puis jusqu'en février 2005, etc.).\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nRécupérer l'ensemble des dates de fin d'estimation avec la fonction `window(time(ipi_c_eu[, \"FR\"]), start = 2005)`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\ndates <- as.numeric(window(time(ipi_c_eu[, \"FR\"]), start = 2005))\nestimations <- sapply(dates, function(last_date_estimation){\n\tmyjsa <- jx13(window(ipi_c_eu[, \"FR\"], end = last_date_estimation), spec_sans_easter)\n\tsa <- get_indicators(myjsa, \"sa\")$sa\n\twindow(sa, start = 2005, end = 2005) # Pour ne récupérer que la valeur en 2005\n})\nestimations <- ts(estimations, start = 2005, frequency = 12)\nplot(estimations)\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\n# RJDemetra v3\n\n## Créer une specification {#sec-spec-jd3}\n\nLes modèles autour de la méthode X-13ARIMA peuvent être estimés avec `rjd3x13::x13()`, `rjd3x13::regarima()`) et `rjd3x13::x11()`.\n\nLes spécifications peuvent être crées avec les fonctions `rjd3x13::regarima_spec`, `rjd3x13::spec_x11()` ou `rjd3x13::x13_spec()` et peuvent être modifiées par :\n\n- Pour le préajustement : `rjd3toolkit::set_arima()`, `rjd3toolkit::set_automodel()`, `rjd3toolkit::set_basic()`, `rjd3toolkit::set_easter()`, `rjd3toolkit::set_estimate()`, `rjd3toolkit::set_outlier()`, `rjd3toolkit::set_tradingdays()`, `rjd3toolkit::set_transform()`, `rjd3toolkit::add_outlier()`, `rjd3toolkit::remove_outlier()`, `rjd3toolkit::add_ramp()`, `rjd3toolkit::remove_ramp()`, `rjd3toolkit::add_usrdefvar()` ;\n\n- Pour la décomposition : `rjd3x13::set_x11()` ;\n\n- Pour le benchmarking : `rjd3toolkit::set_benchmarking()`.\n\n\n\n\n\n\n::: callout-note\n## Exercice\nFaire la désaisonnalisation d'une série avec X-13 avec la spécification suivante :\n\n- détection automatique du schéma de décomposition, des outliers et du modèle ARIMA ;\n- une correction des jours ouvrables \"working days\" et un effet graduel de Pâques.\n\nFaire ensuite un graphique avec la série brute et la série désaisonnalisée.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nUtiliser la spécification `RSA4c` pour la désaisonnalisation.\n\nSi le modèle créé s'appelle `sa_jd3`, regarder les valeurs de `sa_jd3$result$final` et `rjd3toolkit::sa_decomposition(sa_jd3)`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nsa_jd3 <- rjd3x13::x13(ipi_c_eu[, \"FR\"], \"rsa4\")\nsa_jd3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRegARIMA\nLog-transformation: yes \nSARIMA model:  (2,1,1) (0,1,1)\n\nCoefficients\n          Estimate Std. Error  T-stat\nphi(1)     0.02269    0.10769   0.211\nphi(2)     0.15463    0.07367   2.099\ntheta(1)  -0.52470    0.09974  -5.261\nbtheta(1) -0.70977    0.04324 -16.415\n\nRegression model:\n                  Estimate Std. Error T-stat\ntd               0.0070856  0.0002973 23.830\neaster          -0.0218293  0.0041947 -5.204\nLS (2008-11-01) -0.0851379  0.0169175 -5.033\nLS (2009-01-01) -0.0720198  0.0168966 -4.262\nAO (2011-05-01)  0.1267563  0.0170943  7.415\nNumber of observations:  360 \nNumber of effective observations:  347 \nNumber of parameters:  10 \n\nLoglikelihood:  850.2857 \nAdjusted loglikelihood:  -752.4816 \n\nStandard error of the regression (ML estimate):  0.02060681 \nAIC:  1524.963 \nAICC:  1525.618 \nBIC:  1563.456 \n\n\nDecomposition\nMonitoring and Quality Assessment Statistics: \n    M stats\nm1    0.087\nm2    0.049\nm3    0.934\nm4    0.713\nm5    0.965\nm6    0.212\nm7    0.075\nm8    0.198\nm9    0.070\nm10   0.209\nm11   0.195\nq     0.340\nqm2   0.376\n\nFinal filters: \nSeasonal filter:  \nTrend filter: 13 terms Henderson moving average\n\nDiagnostics\nRelative contribution of the components to the stationary\nportion of the variance in the original series,\nafter the removal of the long term trend (in %)\n\n           Component\n cycle         8.148\n seasonal     53.817\n irregular     0.338\n calendar      2.074\n others       30.402\n total        94.779\n\nResidual seasonality tests\n                P.value\n seas.ftest.i     0.122\n seas.ftest.sa    0.486\n seas.qstest.i    0.600\n seas.qstest.sa   0.788\n td.ftest.i       0.383\n td.ftest.sa      0.420\n\n\nFinal\nLast values\n         series       sa    trend      seas       irr\nJan 2019  103.9 104.9459 104.8892 0.9900340 1.0005406\nFeb 2019  101.9 106.1674 105.2359 0.9598051 1.0088514\nMar 2019  111.0 104.5521 105.4496 1.0616713 0.9914890\nApr 2019  107.4 105.9774 105.4357 1.0134233 1.0051380\nMay 2019  105.5 108.7623 105.2678 0.9700057 1.0331958\nJun 2019  105.8 101.1875 104.9615 1.0455836 0.9640439\nJul 2019  110.1 105.3177 104.5343 1.0454088 1.0074942\nAug 2019   78.7 102.5250 104.0408 0.7676178 0.9854307\nSep 2019  108.5 104.0024 103.5185 1.0432448 1.0046754\nOct 2019  116.8 104.5360 103.0474 1.1173179 1.0144465\nNov 2019  103.8 101.7273 102.7183 1.0203752 0.9903519\nDec 2019   97.7 101.6177 102.5972 0.9614465 0.9904527\n```\n:::\n\n```{.r .cell-code}\ny <- sa_jd3$result$preadjust$a1\nsa <- sa_jd3$result$final$d11final\n# ou :\ndecomp <- rjd3toolkit::sa_decomposition(sa_jd3)\ny <- decomp$series\nsa <- decomp$sa\n# ou on peut directement utiliser les fonctions de rjd3x13 :\nplot(sa_jd3, first_date = 2000 #Pour n'afficher le graphique qu'à partir de 200\n)\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nPour des graphiques `ggplot2`, on peut également utiliser le package [`ggdemetra3`](https://github.com/AQLT/ggdemetra3).\n:::\n\n::: callout-note\n## Exercice\nModifier le modèle précédent pour enlever l'effet graduel de Pâques.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nspec_sans_easter_v3 <- \n\tsa_jd3$estimation_spec |> \n\trjd3toolkit::set_easter(enabled = FALSE)\nsa2_jd3 <- rjd3x13::x13(ipi_c_eu[, \"FR\"], spec_sans_easter_v3)\nsa2_jd3$result$preprocessing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLog-transformation: yes \nSARIMA model:  (2,1,1) (0,1,1)\n\nCoefficients\n          Estimate Std. Error  T-stat\nphi(1)     0.05029    0.10689   0.470\nphi(2)     0.09574    0.07647   1.252\ntheta(1)  -0.55562    0.09576  -5.802\nbtheta(1) -0.73033    0.03972 -18.387\n\nRegression model:\n                  Estimate Std. Error T-stat\ntd               0.0071788  0.0003171 22.637\nLS (2008-11-01) -0.0869273  0.0171661 -5.064\nLS (2009-01-01) -0.0710048  0.0171448 -4.141\nAO (2011-05-01)  0.1242974  0.0180391  6.890\nNumber of observations:  360 \nNumber of effective observations:  347 \nNumber of parameters:  9 \n\nLoglikelihood:  838.005 \nAdjusted loglikelihood:  -764.7623 \n\nStandard error of the regression (ML estimate):  0.02132569 \nAIC:  1547.525 \nAICC:  1548.059 \nBIC:  1582.168 \n```\n:::\n:::\n\n:::\n\n::: callout-note\n## Exercice\nCalculer les p-valeurs associées au modèle Reg-ARIMA de la précédente spécification.\n:::\n\n::: {.callout-caution collapse=\"true\"}\n## Indice\nRécupérer le modèle Reg-ARIMA et utiliser la fonction `summary()`.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sa2_jd3$result$preprocessing)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nLog-transformation: yes \nSARIMA model:  (2,1,1) (0,1,1)\n\nCoefficients\n          Estimate Std. Error  T-stat Pr(>|t|)    \nphi(1)     0.05029    0.10689   0.470    0.638    \nphi(2)     0.09574    0.07647   1.252    0.211    \ntheta(1)  -0.55562    0.09576  -5.802  1.5e-08 ***\nbtheta(1) -0.73033    0.03972 -18.387  < 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nRegression model:\n                  Estimate Std. Error T-stat Pr(>|t|)    \ntd               0.0071788  0.0003171 22.637  < 2e-16 ***\nLS (2008-11-01) -0.0869273  0.0171661 -5.064 6.76e-07 ***\nLS (2009-01-01) -0.0710048  0.0171448 -4.141 4.36e-05 ***\nAO (2011-05-01)  0.1242974  0.0180391  6.890 2.72e-11 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\nNumber of observations:  360 , Number of effective observations:  347 , Number of parameters:  9 \nLoglikelihood:  838.005, Adjusted loglikelihood:  -764.7623\nStandard error of the regression (ML estimate):  0.02132569 \nAIC:  1547.525 , AICc:  1548.059 , BIC:  1582.168 \n```\n:::\n:::\n\n:::\n\n## Créer un workspace\n\nDans cette partie nous allons créer un workspace depuis R.\nPour cela les fonctions qui peuvent être utilisées sont `rjdemetra3::.jws_new()`, `rjdemetra3::read_workspace()`, `rjdemetra3::.jws_sap_new()`, `rjdemetra3::add_sa_item()`, `rjdemetra3::save_workspace()`.\n\n::: callout-note\n## Exercice\nCréer un workspace qui va contenir une série désaisonnalisée selon 3 spécifications différentes.\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n\n::: {.cell}\n\n```{.r .cell-code}\njws <- rjdemetra3::.jws_new()\njsap <- rjdemetra3::.jws_sap_new(jws, \"MP-1\")\nrjdemetra3::add_sa_item(jsap, \"X13 avec Pâques\", sa_jd3)\nrjdemetra3::add_sa_item(jsap, \"X13 sans Pâques\", sa2_jd3)\nrjdemetra3::add_sa_item(jsap, \"TRAMO-SEATS\", y, rjd3tramoseats::spec_tramoseats())\nrjdemetra3::save_workspace(jws, \"ws_v3.xml\")\n```\n:::\n\n:::\n\n::: callout-note\n## Exercice\nImporter le workspace précédent et récupérer :  \n\n- Le nom du premier multi-processing\n- Le nombre de modèles dans ce premier multi-processing\n- L'ensemble des séries brutes\n- Le 2ème modèle\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\n# charge tous les modèles du workspace :\njws <- rjdemetra3::.jws_load(\"ws_v3.xml\")\nws <- rjdemetra3::read_workspace(jws)\nnames(ws$processing)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MP-1\"\n```\n:::\n\n```{.r .cell-code}\nlength(ws$processing[[1]]) # Nombre de multiprocessing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\nAutre façon de faire similaire à `RJDemetra` : \n\n::: {.cell}\n\n```{.r .cell-code}\n# charge tous les modèles du workspace :\njws <- rjdemetra3::.jws_load(\"ws_v3.xml\")\nrjdemetra3::.jws_compute(jws)\nrjdemetra3::.jws_sap_count(jws) # Nombre de multiprocessing\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\njsap1 <- rjdemetra3::.jws_sap(jws, 1) # Le premier multiprocessing\nrjdemetra3::.jsap_name(jsap1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"MP-1\"\n```\n:::\n\n```{.r .cell-code}\nrjdemetra3::.jsap_sa_count(jsap1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nmodel2 <- rjdemetra3::.jsap_sa(jsap1, 2) # On récupère l'objet associé au 2ème modèle\nrjdemetra3::.jsa_read(model2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$ts\n$name\n[1] \"X13 sans Pâques\"\n\n$moniker\n$source\n[1] \"\"\n\n$id\n[1] \"f15592ce-2d48-4450-89ca-5a2f3a8f4644\"\n\nattr(,\"class\")\n[1] \"JD3_TSMONIKER\"\n\n$metadata\nNULL\n\n$data\n       Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec\n1990  92.1  92.3 102.1  93.0  93.3 100.8  92.9  66.7  95.8 105.0  96.7  89.2\n1991  92.5  89.2  97.4  93.8  87.5 100.3  93.4  64.3  96.9 103.5  94.0  92.1\n1992  90.7  89.0  99.4  93.7  86.1 101.3  90.4  62.9  96.6  98.4  91.9  92.6\n1993  82.3  84.0  95.6  88.3  82.2  97.9  85.5  61.3  93.7  93.0  88.3  92.1\n1994  83.6  83.7  97.0  88.3  88.3 102.9  87.3  65.9  98.2  98.0  96.8  98.0\n1995  91.8  90.1 102.9  90.4  91.6 103.7  90.6  66.8  98.7 101.4  97.2  94.8\n1996  92.0  91.1  98.1  94.3  90.5 101.8  96.1  66.3  98.9 105.0  95.0  96.0\n1997  91.9  91.3  99.1 102.8  93.2 108.2 100.4  70.5 107.3 114.1  99.6 106.7\n1998  98.2  98.7 109.3 103.7  97.6 114.7 106.1  72.1 111.5 112.6 105.6 107.4\n1999  97.2  98.3 114.5 104.8  99.9 120.2 105.7  76.1 115.2 115.1 111.1 114.0\n2000 103.4 107.5 121.7 105.7 113.1 119.4 108.1  82.0 116.4 121.3 117.2 111.9\n2001 110.7 108.9 124.0 109.3 109.8 121.9 112.4  85.5 114.1 123.4 114.2 104.9\n2002 108.4 106.7 118.5 113.4 105.6 119.2 113.9  81.4 115.6 121.7 111.0 105.2\n2003 106.9 105.4 117.1 112.0 101.5 115.2 111.2  75.7 117.5 122.4 107.8 109.3\n2004 104.7 106.7 122.8 112.7 104.5 126.5 111.1  79.7 121.9 118.8 112.2 112.6\n2005 107.6 106.3 118.8 113.7 109.7 125.0 106.4  81.7 123.0 115.1 115.5 111.6\n2006 108.8 105.9 124.8 108.0 113.1 126.7 108.7  84.1 121.0 121.5 116.6 108.2\n2007 111.5 109.6 124.0 111.7 111.7 126.6 116.6  87.1 117.3 127.2 118.0 106.5\n2008 113.2 114.4 117.5 120.2 107.6 121.4 115.1  78.8 118.9 118.8  99.5  99.2\n2009  90.7  90.1 100.0  93.9  88.3 105.5  97.9  70.3 106.5 104.7  99.0  95.2\n2010  90.3  93.1 109.5 100.4  95.5 111.8 100.8  74.5 109.0 105.0 102.7 101.9\n2011  99.0 101.6 115.3 101.6 110.1 108.5 101.0  78.3 110.0 106.4 106.3 100.2\n2012  99.3  99.9 110.3  99.8  96.1 108.5 103.8  78.8 102.9 107.6 101.9  91.5\n2013  96.3  95.7 103.8 103.3  96.2 105.4 105.2  73.4 103.3 109.3  99.0  94.5\n2014  96.7  97.0 104.8 102.8  92.3 104.7 103.2  71.4 107.2 107.8  95.6  98.3\n2015  94.6  96.1 108.4 102.4  90.9 111.8 101.1  76.1 109.2 107.8 101.9  99.9\n2016  95.2  99.6 108.4 103.5  98.7 110.4  95.9  79.9 108.1 103.6 105.0  99.7\n2017  99.1  97.3 114.7  98.3 102.9 111.5  99.8  81.7 108.5 113.7 111.3  99.6\n2018 102.2  98.9 112.9 103.2  98.8 112.8 106.9  82.7 104.8 116.3 109.7  97.5\n2019 103.9 101.9 111.0 107.4 105.5 105.8 110.1  78.7 108.5 116.8 103.8  97.7\n\nattr(,\"class\")\n[1] \"JD3_TS\"\n\n$domainSpec\nSpecification\n\nSeries\nSerie span: All \nPreliminary Check: Yes\n\nEstimate\nModel span: All \n\nTolerance: 1e-07\n\nTransformation\nFunction: AUTO\nAIC difference: -2\nAdjust: NONE\n\nRegression\nCalendar regressor: WorkingDays\nwith Leap Year: Yes\nAutoAdjust: TRUE\nTest: REMOVE\n\nEaster: No\n\nPre-specified outliers: 0\nRamps: No\n\nOutliers\nDetection span: All \nOutliers type: \n\t- AO, critical value : 0 (Auto)\n\t- LS, critical value : 0 (Auto)\n\t- TC, critical value : 0 (Auto)\nTC rate: 0.7 (Auto)\nMethod: ADDONE (Auto)\n\nARIMA\nSARIMA model:  (0,1,1) (0,1,1)\n\nCoefficients\n          Estimate      Type\ntheta(1)         0 UNDEFINED\nbtheta(1)        0 UNDEFINED\n\nSpecification X11\nSeasonal component: Yes\nLength of the Henderson filter: 0\nSeasonal filter: FILTER_MSR\nBoundaries used for extreme values correction : \n\t lower_sigma:  1.5 \n\t upper_sigma:  2.5\nNb of forecasts: -1\nNb of backcasts: 0\nCalendar sigma: NONE\n\nBenchmarking\nIs enabled: No\n\n$estimationSpec\nSpecification\n\nSeries\nSerie span: All \nPreliminary Check: Yes\n\nEstimate\nModel span: All \n\nTolerance: 1e-07\n\nTransformation\nFunction: AUTO\nAIC difference: -2\nAdjust: NONE\n\nRegression\nCalendar regressor: WorkingDays\nwith Leap Year: Yes\nAutoAdjust: TRUE\nTest: REMOVE\n\nEaster: No\n\nPre-specified outliers: 0\nRamps: No\n\nOutliers\nDetection span: All \nOutliers type: \n\t- AO, critical value : 0 (Auto)\n\t- LS, critical value : 0 (Auto)\n\t- TC, critical value : 0 (Auto)\nTC rate: 0.7 (Auto)\nMethod: ADDONE (Auto)\n\nARIMA\nSARIMA model:  (0,1,1) (0,1,1)\n\nCoefficients\n          Estimate      Type\ntheta(1)         0 UNDEFINED\nbtheta(1)        0 UNDEFINED\n\nSpecification X11\nSeasonal component: Yes\nLength of the Henderson filter: 0\nSeasonal filter: FILTER_MSR\nBoundaries used for extreme values correction : \n\t lower_sigma:  1.5 \n\t upper_sigma:  2.5\nNb of forecasts: -1\nNb of backcasts: 0\nCalendar sigma: NONE\n\nBenchmarking\nIs enabled: No\n\n$pointSpec\nSpecification\n\nSeries\nSerie span: All \nPreliminary Check: Yes\n\nEstimate\nModel span: All \n\nTolerance: 1e-07\n\nTransformation\nFunction: LOG\nAIC difference: -2\nAdjust: LEAPYEAR\n\nRegression\nCalendar regressor: WorkingDays\nwith Leap Year: No\nAutoAdjust: FALSE\nTest: NO\n\nEaster: No\n\nPre-specified outliers: 3\n\t- LS (2008-11-01), coefficient: -0.0869273387886007 (ESTIMATED)\n\t- LS (2009-01-01), coefficient: -0.0710047923357392 (ESTIMATED)\n\t- AO (2011-05-01), coefficient: 0.124297351091159 (ESTIMATED)\nRamps: No\n\nOutliers\nIs enabled: No\n\nARIMA\nSARIMA model:  (2,1,1) (0,1,1)\n\nCoefficients\n             Estimate      Type\nphi(1)     0.05029197 ESTIMATED\nphi(2)     0.09573828 ESTIMATED\ntheta(1)  -0.55562180 ESTIMATED\nbtheta(1) -0.73032859 ESTIMATED\n\nSpecification X11\nSeasonal component: Yes\nLength of the Henderson filter: 0\nSeasonal filter: FILTER_MSR\nBoundaries used for extreme values correction : \n\t lower_sigma:  1.5 \n\t upper_sigma:  2.5\nNb of forecasts: -1\nNb of backcasts: 0\nCalendar sigma: NONE\n\nBenchmarking\nIs enabled: No\n\n$results\nRegARIMA\nLog-transformation: yes \nSARIMA model:  (2,1,1) (0,1,1)\n\nCoefficients\n          Estimate Std. Error  T-stat\nphi(1)     0.05029    0.10689   0.470\nphi(2)     0.09574    0.07647   1.252\ntheta(1)  -0.55562    0.09576  -5.802\nbtheta(1) -0.73033    0.03972 -18.387\n\nRegression model:\n                  Estimate Std. Error T-stat\ntd               0.0071788  0.0003171 22.637\nLS (2008-11-01) -0.0869273  0.0171661 -5.064\nLS (2009-01-01) -0.0710048  0.0171448 -4.141\nAO (2011-05-01)  0.1242974  0.0180391  6.890\nNumber of observations:  360 \nNumber of effective observations:  347 \nNumber of parameters:  9 \n\nLoglikelihood:  838.005 \nAdjusted loglikelihood:  -764.7623 \n\nStandard error of the regression (ML estimate):  0.02132569 \nAIC:  1547.525 \nAICC:  1548.059 \nBIC:  1582.168 \n\n\nDecomposition\nMonitoring and Quality Assessment Statistics: \n    M stats\nm1    0.080\nm2    0.044\nm3    0.925\nm4    0.324\nm5    1.018\nm6    0.172\nm7    0.075\nm8    0.207\nm9    0.069\nm10   0.229\nm11   0.207\nq     0.311\nqm2   0.344\n\nFinal filters: \nSeasonal filter:  \nTrend filter: 13 terms Henderson moving average\n\nDiagnostics\nRelative contribution of the components to the stationary\nportion of the variance in the original series,\nafter the removal of the long term trend (in %)\n\n           Component\n cycle         8.120\n seasonal     54.041\n irregular     0.305\n calendar      1.946\n others       30.441\n total        94.853\n\nResidual seasonality tests\n                P.value\n seas.ftest.i     0.175\n seas.ftest.sa    0.566\n seas.qstest.i    0.956\n seas.qstest.sa   1.000\n td.ftest.i       0.281\n td.ftest.sa      0.279\n\n\nFinal\nLast values\n         series       sa    trend      seas       irr\nJan 2019  103.9 104.9497 104.8872 0.9899977 1.0005966\nFeb 2019  101.9 106.2130 105.1277 0.9593928 1.0103234\nMar 2019  111.0 104.7070 105.2207 1.0601008 0.9951181\nApr 2019  107.4 105.0688 105.1200 1.0221872 0.9995130\nMay 2019  105.5 108.7078 104.9337 0.9704918 1.0359659\nJun 2019  105.8 101.5038 104.6881 1.0423255 0.9695828\nJul 2019  110.1 105.4918 104.3766 1.0436829 1.0106850\nAug 2019   78.7 102.6360 104.0097 0.7667871 0.9867928\nSep 2019  108.5 104.0439 103.5870 1.0428287 1.0044107\nOct 2019  116.8 104.5857 103.1442 1.1167879 1.0139754\nNov 2019  103.8 101.7786 102.7722 1.0198610 0.9903319\nDec 2019   97.7 101.5883 102.5735 0.9617251 0.9903948\n```\n:::\n\n```{.r .cell-code}\n# Pour extraire toutes les séries brutes il faut faire une boucle :\nall_y <- lapply(\n\tlapply(\n\t\tseq_len(rjdemetra3::.jsap_sa_count(jsap1)),\n\t\trjdemetra3::.jsap_sa, jsap = jsap1\n\t),\n\trjdemetra3::get_raw_data\n)\n```\n:::\n\n:::\n\n## Manipuler les objets Java\n\nLa manipulation des objets Java se fait de la même façon qu'avec `RJDemetra` : `jx13()` pour estimer les modèles, `rjd3toolkit::dictionary()` pour connaitre l'ensemble des objets exportables et `rjd3toolkit::result()` et `rjd3toolkit::user_defined()` pour exporter des objets.\n\n::: callout-note\n## Exercice\nCréer un modèle à partir de la fonction `jx13()` et la spécification sans effet graduel de pâques calculée dans la section [-@sec-spec-jd3].\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Solution\n\n::: {.cell}\n\n```{.r .cell-code}\nmyjsa <- rjd3x13::jx13(ipi_c_eu[, \"FR\"], spec_sans_easter_v3)\nrjd3toolkit::result(myjsa, \"sa\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           Jan       Feb       Mar       Apr       May       Jun       Jul\n1990  93.27297  96.29529  94.47992  93.73334  93.94507  92.83948  94.28898\n1991  93.61809  93.12145  92.56800  92.23966  88.02740  94.55282  92.48219\n1992  91.62891  91.43164  92.38484  92.19526  91.08704  90.59578  89.51814\n1993  87.30634  87.99736  86.85921  86.97894  86.99296  87.29234  86.76534\n1994  88.69622  87.77278  88.37550  89.30617  91.27332  91.48108  90.65425\n1995  95.09916  94.52731  93.92731  93.90941  92.37904  92.04264  93.77960\n1996  93.06670  91.54362  94.26169  93.30918  91.32878  94.96354  94.26156\n1997  93.06742  95.67044  95.13059 101.85852  96.43204  98.44794  98.23010\n1998 102.13804 103.25275 102.01932 102.89690 103.62209 101.81934 103.60992\n1999 103.71964 102.64444 103.76759 104.04665 106.13300 106.82584 105.69365\n2000 110.38789 107.38428 109.60527 110.17270 114.61835 106.35539 110.67086\n2001 112.45025 113.34404 113.88119 110.73914 111.61677 111.49774 112.13527\n2002 110.26696 110.99285 111.13280 111.58735 107.54579 111.87216 110.92070\n2003 108.72641 109.77205 109.75157 109.85823 105.81090 105.36978 108.56247\n2004 109.12622 109.43552 109.52322 110.42603 111.47708 112.70525 111.38248\n2005 114.72876 111.07384 106.23729 114.40231 113.83685 111.14636 109.33782\n2006 112.84430 110.57123 111.88827 111.79247 114.34733 112.62975 111.48879\n2007 112.53191 114.29580 114.23701 113.06787 112.93424 115.43386 116.32303\n2008 114.06045 113.94479 111.07964 118.83142 111.92185 110.96502 111.54674\n2009  93.60983  93.32624  92.17979  92.82197  94.61843  94.29186  94.42552\n2010  95.51378  96.12075  98.46495  99.01596 102.81821 100.22951  99.30088\n2011 104.88511 104.72507 103.63569 102.25128 116.10803  97.55663 101.60353\n2012 102.83064  98.48657 101.60323  99.95552  99.30289 100.25687 101.48753\n2013  97.45647  98.45690  97.93752 100.35136  99.79029 100.14504 100.08302\n2014  97.89835 100.00657  98.78845  99.56271  98.29814  97.26484  98.38400\n2015  98.27255  99.53811  99.50288  99.07983  99.28072 101.49169  96.66780\n2016 101.32397  99.22467  96.95194 102.97678 105.03035 100.37169  96.68839\n2017 102.72859 101.41668 102.63068 100.60800 106.58076 101.54656 100.67684\n2018 103.19713 103.14126 103.70512 103.35321 102.04279 105.47626 105.16178\n2019 104.94974 106.21301 104.70703 105.06882 108.70777 101.50380 105.49182\n           Aug       Sep       Oct       Nov       Dec\n1990  92.81532  93.42471  93.21965  92.25071  90.06120\n1991  91.72254  92.21808  91.96428  92.02285  90.46195\n1992  91.95223  89.69252  89.81277  90.02832  88.33305\n1993  87.30196  87.03081  87.21300  84.45288  87.46656\n1994  91.37247  91.19741  91.98386  92.78677  95.17153\n1995  92.38821  93.99473  92.85706  93.36671  94.38969\n1996  93.75684  94.14529  93.72433  93.79062  93.43034\n1997 101.81145  99.64928 101.86478 100.90774 101.70138\n1998 103.62658 103.60456 103.09096 104.46065 102.99964\n1999 106.07083 107.12621 108.29389 107.17738 110.10121\n2000 111.01860 110.92744 111.42763 113.10692 114.51591\n2001 115.50617 111.31601 110.65583 110.20538 108.13496\n2002 112.75124 109.55689 109.18036 109.90888 106.38982\n2003 107.51695 108.10694 110.01758 109.50133 108.16481\n2004 110.31329 111.75189 112.44658 108.46909 111.73847\n2005 110.00423 112.59573 109.23755 111.65978 113.81028\n2006 112.62602 113.48751 112.76156 112.55066 113.59524\n2007 115.82842 112.91804 115.49735 113.69438 112.28629\n2008 109.36385 109.09853 108.03727 100.63715  99.86453\n2009  96.91866  97.94749  97.85918  97.60413  96.07650\n2010  99.54513 100.43465 100.75478  98.83301 102.97020\n2011 101.60617 101.45457 102.21445 102.59847 103.85016\n2012 101.83135  99.96547  98.23490  98.64730  97.23489\n2013  96.84385  97.95614  99.86479  98.42704  97.79728\n2014  96.12996  99.28707  98.34888  97.27581  99.01780\n2015 102.05354 101.35873 100.66252 100.76102 100.45864\n2016 101.62022 100.64268  98.76241 100.83623 102.82647\n2017 103.73341 103.82246 105.29816 106.59767 105.53517\n2018 105.03057 103.00707 104.49092 104.89205 103.66171\n2019 102.63605 104.04393 104.58566 101.77858 101.58828\n```\n:::\n:::\n\n:::\n\nPour les révisions, la fonction `rjd3x13::x13_revisions()` facilite grandement la tâche.\nL'historique des révisions peut s'exporter à partir de trois paramètres :\n\n- `data_ids` qui permet d'exporter des statistiques ;\n\n- `ts_ids` qui permet d'exporter des estimations d'une composante à une certaine date ;\n\n- `cmp_ids` qui permet l'ensemble des estimations d'une composante à une ensemble de dates.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_ids <- list(\n\t# Export du coefficient du premier régresseur jours ouvrables\n\tlist(start = \"2005-01-01\", id = \"regression.td(1)\"))\nts_ids <- list(\n\t# Export de l'historique des estimations de la séries SA de janv 2010 à partir de janvier 2010\n\tlist(period = \"2010-01-01\", start = \"2010-01-01\", id = \"sa\"))\ncmp_ids <- list(\n\t# Export de l'ensemble des tendances estimées entre janv 2010 et dec 2014\n\tlist(start = \"2010-01-01\", end = \"2014-12-01\", id = \"t\"))\nrh <- rjd3x13::x13_revisions(\n\tsa2_jd3$result$preadjust$a1,\n\tspec = sa2_jd3$result_spec, \n\tdata_ids, ts_ids, cmp_ids)\nplot(rh$data$`regression.td(1)`,\n\t ylab = \"Coef\", main = \"Coef td\")\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(rh$series$sa,\n\t ylab = NULL, main = \"SA de janv 2010\")\n```\n\n::: {.cell-output-display}\n![](R_1_R_et_JD_files/figure-html/unnamed-chunk-20-2.png){width=672}\n:::\n\n```{.r .cell-code}\nncol(rh$components$t) # nombre de séries exportées\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n:::\n\n\n",
    "supporting": [
      "R_1_R_et_JD_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}